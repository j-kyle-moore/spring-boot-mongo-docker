pipeline {
  agent {
    kubernetes {
      //cloud 'kubernetes'
      yaml """
kind: Pod
metadata:
  name: kaniko
  namespace: jenkins
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug-539ddefcae3fd6b411a95982a830d987f4214251
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    volumeMounts:
      - name: docker-config-rh-un-pw
        mountPath: /kaniko/.docker
    volumes:
      - name: docker-config-rh-un-pw
        configMap:
          name: docker-config-rh-un-pw
  volumes:
  - name: docker-config-rh-un-pw
    projected:
      sources:
      - secret:
          name: regcred-rh-un-pw
          items:
            - key: .dockerconfigjson
              path: config.json
"""
    }
  }
  stages {
    stage('SCM Checkout'){
      steps {
        git(credentialsId: 'jkm-github', url: 'https://github.com/j-kyle-moore/spring-boot-mongo-docker.git', branch: '28sep24jenkinspl')
      }
    }

    stage('Maven Clean Package') {
      steps {
        script {
          env.mavenHome = tool name: "Maven-3.8.2", type: "maven"
          env.mavenCMD = "${mavenHome}/bin/mvn"
          sh "${mavenCMD} clean package"
        }
      }
    }

    stage('Build and Push with Kaniko') {
      steps {
        //git 'https://github.com/prabhatsharma/sample-microservice'
        container(name: 'kaniko') {
            sh '''
            /kaniko/executor --dockerfile `pwd`/Dockerfile  --context `pwd` --destination=kylemoore/jenkinstest:latest --destination=kylemoore/jenkinstest:v$BUILD_NUMBER --verbosity=debug
            '''
        }
      }
    }
  }
}
